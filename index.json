[{"id":"\/1.x\/intro.html#1-1-1","title":"1.1.1. Installation","content":"Qiq is installable via Composer as qiq\/qiq:composer require qiq\/qiq ^1.0 "},{"id":"\/1.x\/intro.html#1-1-2","title":"1.1.2. Getting Started","content":"First, a template file, saved at \/path\/to\/templates\/hello.php:Hello, {{h $this-&gt;name }}. That was Qiq! And this is PHP, &lt;?= $this-&gt;h($this-&gt;name) ?&gt;. Next, the presentation code, to generate output using the hello template:use Qiq\\Template; $tpl = Template::new('\/path\/to\/templates'); $tpl-&gt;setView('hello'); $tpl-&gt;setData([ 'name' =&gt; 'World' ]); echo $tpl(); That's all there is to it."},{"id":"\/1.x\/syntax.html#1-2","title":"1.2. Template Syntax","content":"Qiq templates are native PHP templates, with an optional {{ ... }} syntax for concise escaping and helper use."},{"id":"\/1.x\/syntax.html#1-2-1","title":"1.2.1. Escaping and Output","content":"Qiq will not echo any output itself, unless the opening tag starts with a recognized escaping character: {{ ... }} will not echo at all by itself {{= ... }} will echo raw unescaped output {{h ... }} will echo escaped for HTML content {{a ... }} will echo escaped for HTML attributes {{u ... }} will echo escaped for URLs {{c ... }} will echo escaped for CSS {{j ... }} will echo escaped for JavaScript The {{a ... }} tag offers the additional ability to output an array, using the key as the attribute label and the value as the attribute value; multiple attribute values will be space-separated. The following Qiq code ...&lt;span {{a ['id' =&gt; 'foo', 'class' =&gt; ['bar', 'baz', 'dib']] }}&gt;Text&lt;\/span&gt; ... will render as:&lt;span id=\"foo\" class=\"bar baz dib\"&gt;Text&lt;\/span&gt; You can echo just about any variable, literal, function, method, expression, or constant, including the magic constants __DIR__, __FILE__, and __LINE__.{{h $this-&gt;foo }} {{h $foo }} {{h \"foo\" }} {{h 1 + 2 }} {{h __FILE__ }} {{h PHP_EOL }} {{h $person-&gt;firstName() }} {{h time() }} If you need to embed double curly braces literally, and not have them interpreted as Qiq tags, put a backslash between the braces. The following Qiq code ...{{ \/* this is qiq code *\/ }} {\\{ this is not qiq code }\\} ... will compile to this PHP code:&lt;?php \/* this is qiq code *\/ ?&gt; {{ this is not qiq code }} "},{"id":"\/1.x\/syntax.html#1-2-2","title":"1.2.2. Control Structures","content":"All control structures are written exactly as in PHP, using the alternative control structure syntax when available, inside {{ ... }} Qiq tags.For example, this Qiq code ...{{ foreach ($foo as $bar =&gt; $baz): }} {{ if ($baz === 0): }} {{= \"First element!\" }} {{ else: }} {{= \"Not the first element.\" }} {{ endif }} {{ endforeach }} ... is the same as this PHP code:&lt;?php foreach ($foo as $bar =&gt; $baz): ?&gt; &lt;?php if ($bar === 0): ?&gt; &lt;?= \"First element!\" ?&gt;&lt;?= PHP_EOL ?&gt; &lt;?php else: ?&gt; &lt;?= \"Not the first element.\" ?&gt;&lt;?= PHP_EOL ?&gt; &lt;?php endif ?&gt; &lt;?php endforeach ?&gt; Qiq syntax recognizes most PHP control structures: break continue declare for, endfor foreach, endforeach goto if, elseif, else, endif include, include_once require, require_once while, endwhile Qiq does not recognize else if, switch, case, or match; for these, you can always fall back to plain PHP."},{"id":"\/1.x\/syntax.html#1-2-3","title":"1.2.3. Reserved Words","content":"Qiq recognizes the following reserved words. empty isset list namespace use "},{"id":"\/1.x\/syntax.html#1-2-4","title":"1.2.4. Helpers","content":"Any opening keyword Qiq does not recognize is treated as a template helper method. The following Qiq syntax ...{{= label (\"Street Address\", ['for' =&gt; 'street']) }} {{= textField ([ 'name' =&gt; 'street', 'value' =&gt; $this-&gt;street, ]) }} ... is equivalent to this PHP code with Qiq helpers:&lt;?= $this-&gt;label(\"Street Address\", ['for' =&gt; 'street']) ?&gt; &lt;?= $this-&gt;textField([ 'name' =&gt; 'street', 'value' =&gt; $this-&gt;street, ]) ?&gt; "},{"id":"\/1.x\/syntax.html#1-2-5","title":"1.2.5. Other PHP Code","content":"Qiq treats all other code inside {{ ... }} tags as plain old PHP code. For example, this Qiq syntax ...{{ $title = \"Prefix: \" . $this-&gt;title . \" (Suffix)\" }} &lt;title&gt;{{h $title}}&lt;\/title&gt; ... is equivalent to this PHP code with Qiq helpers:&lt;?php $title = \"Prefix: \" . $this-&gt;title . \" (Suffix)\" ?&gt; &lt;title&gt;&lt;?= $this-&gt;h($title) ?&gt;&lt;\/title&gt; "},{"id":"\/1.x\/syntax.html#1-2-6","title":"1.2.6. Whitespace","content":"Qiq goes to some lengths to help control whitespace in output, to keep the compiled template code on the same lines as in the source template, and to help make sure the output is formatted nicely."},{"id":"\/1.x\/syntax.html#1-2-6-1","title":"1.2.6.1. Newlines","content":"Qiq offers intuitive handling of newlines around tags: Non-echoing Qiq tags, just as with plain PHP, will consume any single trailing newline immediately after the closing tag. Echoing Qiq tags, whether raw or escaped, will honor any single trailing newline immediately after the closing tag. For example, this Qiq code ...{{ if ($this-&gt;condition): }} {{= \"foo\" }} {{ endif; }} ... compiles to this PHP code:&lt;?php if ($this-&gt;condition): ?&gt; &lt;?= \"foo\" ?&gt;&lt;?= PHP_EOL ?&gt; &lt;?php endif ?&gt; Non-echoing Qiq can be made to echo a single leading newline by using a tilde with the opening tag. This Qiq code ...{{~ foreach ($foo as $bar): }} ... {{~ endforeach }} ... compiles to this PHP code:&lt;?= PHP_EOL ?&gt;&lt;?php foreach ($foo as $bar): ?&gt; ... &lt;?= PHP_EOL ?&gt;&lt;?php endforeach ?&gt; This is especially useful with looping output code, where you want to honor newlines at the very beginning and very end of the loop.Echoing Qiq can be made to consume a single trailing newline by using a tilde with the closing tag. This Qiq code ...{{h $foo ~}} ... compiles to this PHP code:&lt;?= $this-&gt;h($foo) ?&gt; A tilde with the closing tag has no effect on non-echoing Qiq code."},{"id":"\/1.x\/syntax.html#1-2-6-2","title":"1.2.6.2. Indenting","content":"Echoing Qiq tags will automatically set the current indent for helpers based on the leading whitespace before the opening Qiq tag.This Qiq code ...&lt;ul&gt; {{= $this-&gt;items(['foo', 'bar', 'baz']) }} &lt;\/ul&gt; ... compiles to this PHP code:&lt;ul&gt; &lt;?php \\Qiq\\Indent::set(' ') ?&gt;&lt;?= $this-&gt;items(['foo', 'bar', 'baz']) ?&gt; &lt;\/ul&gt; "},{"id":"\/1.x\/data.html#1-3","title":"1.3. Template Data","content":"To assign a data collection to the Template, use the setData() method and pass either an array or a stdClass object.$tpl-&gt;setData([ 'items' =&gt; [ [ 'id' =&gt; '1', 'name' =&gt; 'Foo', ], [ 'id' =&gt; '2', 'name' =&gt; 'Bar', ], [ 'id' =&gt; '3', 'name' =&gt; 'Baz', ], ) ]); The setData() method will overwrite all existing data in the Template object.The addData() method, on the other hand, will merge any iterable with the existing Template data.$tpl-&gt;addData([ 'title' =&gt; 'My Items', ]); You can then use the data elements as if they are properties of $this inside the template:&lt;p&gt;{{h $this-&gt;title}}&lt;\/p&gt; &lt;ul&gt; {{ foreach ($this-&gt;items as $id =&gt; $name): }} &lt;li id=\"{{a $id}}\"&gt;{{h $name }}&lt;\/li&gt; &lt;\/ul&gt; "},{"id":"\/1.x\/locator.html#1-4","title":"1.4. Template Locator","content":"Qiq will search through any number of directory paths for named templates. You can pass an array of paths to Template::new() ...$tpl = Template::new( paths: [ '\/path\/to\/custom\/templates', '\/path\/to\/default\/templates', ], ); ... or you can tell the TemplateLocator directly:$tpl-&gt;getTempLatelocator()-&gt;setPaths([ '\/path\/to\/custom\/templates', '\/path\/to\/default\/templates', ]); The TemplateLocator will search for the named template from the first directory path to the last.\/* searches first for: \/path\/to\/custom\/templates\/foo.php, and then second for: \/path\/to\/default\/templates\/foo.php *\/ $output = $tpl('foo'); If you like, you can modify the paths after the Template instantiation to append or prepend a directory path to the TemplateLocator:$tpl-&gt;getTemplateLocator()-&gt;prependPath('\/higher\/precedence\/templates'); $tpl-&gt;getTemplateLocator()-&gt;appendPath('\/lower\/precedence\/templates'); "},{"id":"\/1.x\/locator.html#1-4","title":"1.4. Subdirectories","content":"To render a template from any location, use the absolute path to the template name:\/\/ renders the \"foo\/bar\/baz.php\" template $output = $tpl('foo\/bar\/baz'); Alternatively, while inside a template, you may refer to template names by relative path. Use .\/ to indicate a template in the same directory, or ..\/ to indicate the directory above the current one.Given a template file structure like the following ...foo.php foo\/ bar.php bar\/ baz.php dib.php ... while inside the foo\/bar\/baz.php template file:\/\/ refers to \"foo\/bar\/dib.php\" echo $this-&gt;render('.\/dib'); \/\/ refers to \"foo\/bar.php\" echo $this-&gt;render('..\/bar'); \/\/ refers to \"foo.php\" echo $this-&gt;render('..\/..\/foo'); "},{"id":"\/1.x\/locator.html#1-4","title":"1.4. File Name Extension","content":"By default, the TemplateLocator will auto-append .php to template file names. If the template files end with a different extension, change it using the setExtension() method:$templateLocator = $tpl-&gt;getTempLatelocator(); $templateLocator-&gt;setExtension('.phtml'); Or, you can set it at Template creation time:$tpl = Template::new( extension: '.phtml' ); "},{"id":"\/1.x\/locator.html#1-4","title":"1.4. Collections","content":"Sometimes it may be useful to identify collections of templates, say for emails or for admin pages. (Other systems may refer to these as \"groups\", \"folders\", or \"namespaces\".)To associate a directory path with a collection, prefix the path with the collection name and a colon:$tpl = new Template( paths: [ 'admin:\/path\/to\/admin\/templates', 'email:\/path\/to\/email\/templates', ] ); To render a template from a collection, prefix the template name with the collection name.$output = $tpl('email:notify\/subscribed'); You can set, append, and prepend collection paths, the same as you would with the \"main\" or \"default\" collection of unprefixed template paths."},{"id":"\/1.x\/partials.html#1-5","title":"1.5. Partials","content":"Sometimes you will want to split a single template into multiple pieces. You can render these \"partial\" template pieces using the render() method in your main template code.When rendering, you can pass an array of variables to be extracted into the local scope of the partial template. (The main $this Template variable will always be available regardless.)For example, a list partial template might look like this:&lt;ul&gt; {{ foreach ($items as $item): }} &lt;li&gt;{{h $item}}&lt;\/li&gt; {{ endforeach }} &lt;\/ul&gt; Then in a main browse template, you can render the partial list:&lt;p&gt;My List&lt;\/p&gt; {{= render ('list', [ 'items' =&gt; 'foo', 'bar', 'baz'] ]) }} The rendered HTML will look something like this:&lt;p&gt;My List&lt;\/p&gt; &lt;ul&gt; &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; &lt;\/ul&gt; "},{"id":"\/1.x\/layouts.html#1-6","title":"1.6. Layouts","content":"To wrap a main \"inner\" view template with an \"outer\" layout template, call setLayout() to pick a second \"outer\" template for the second step. (If no layout is set, the second step will not be executed.)Let's say you already have a view template called browse. You might then have a layout template called default to wrap the view. The default.php layout template could look like this:&lt;html&gt; &lt;head&gt; &lt;title&gt;My Site&lt;\/title&gt; &lt;\/head&gt; &lt;body&gt; {{= getContent() }} &lt;\/body&gt; &lt;\/html&gt; You can then set the view and layout templates on the Template object and invoke it:$tpl-&gt;setView('browse'); $tpl-&gt;setLayout('default'); $output = $tpl(); The output from the inner view template is automatically retained and becomes available via the getContent() method on the Template object. The layout template then calls getContent() to place the inner view results in the outer layout template. Note: You can also call setLayout() from inside the view template, allowing you to pick a layout as part of the view logic. The view template and the layout template both execute inside the same Template object. This means: All data values are shared between the view and the layout. Any data assigned to the view, or modified by the view, is used as-is by the layout. All helpers are shared between the view and the layout. This sharing situation allows the view to modify data and helpers before the layout is executed. All section bodies and blocks are shared between the view and the layout. A section or block that is captured from the view template can therefore be used by the layout template. "},{"id":"\/1.x\/sections.html#1-7","title":"1.7. Sections","content":"Sections are similar to partials, except that they are captured inline for later use. In general, they are used by view templates to capture output for layout templates.For example, you can capture output in the view template to a named section ...{{ setSection ('local-nav') }} &lt;!-- ... local navigation items ... --&gt; {{ endSection () }} ... and then use that output in a layout template:&lt;div id=\"local-nav\"&gt; {{= getSection ('local-nav') }} &lt;\/div&gt; Using setSection() will overwrite any previous content for that section. Use preSection() to prepend, and addSection() to append, to a section.{{ preSection ('local-nav')}} &lt;!-- add items to the top of the nav --&gt; {{ endSection() }} {{ addSection ('local-nav')}} &lt;!-- add items to the end of the nav --&gt; {{ endSection() }} You can see if a section exists using hasSection():{{ if ($this-&gt;hasSection('local-nav')): }} &lt;div id=\"local-nav\"&gt; {{= getSection ('local-nav') }} &lt;\/div&gt; {{ endif }} "},{"id":"\/1.x\/blocks.html#1-8","title":"1.8. Blocks","content":"Blocks and sections serve similar purposes, but have different implementations and features.Blocks are similar to partials, except that they are captured inline for later use. In general, blocks are used by view templates to capture output for layout templates.Alternatively, blocks may be used by child templates to capture output for parent templates (cf. the inheritance documentation).For example, a layout template file might define a block for local navigation, adding some default content for that block:&lt;html&gt; &lt;head&gt; &lt;title&gt;Blocks Example&lt;\/title&gt; &lt;\/head&gt; &lt;body&gt; &lt;div id=\"local-nav\"&gt; {{ setBlock ('local-nav') }} &lt;p&gt;&lt;a href=\"\/foo\"&gt;Foo&lt;\/a&gt;&lt;\/p&gt;&lt;!-- layout --&gt; {{= getBlock () ~}} &lt;\/div&gt; &lt;\/body&gt; &lt;\/html&gt; The setBlock() method opens the specified block; getBlock() closes the block and echoes the captured output between the two method calls.Then, a view file might redefine that block:{{ setBlock ('local-nav') }} &lt;p&gt;&lt;a href=\"\/bar\"&gt;Bar&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, above parent--&gt; {{ parentBlock() }} &lt;p&gt;&lt;a href=\"\/baz\"&gt;Baz&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, below parent --&gt; {{ endBlock () }} Note the use of parentBlock() above. This method is a placeholder for the parent block content, allowing you to prepend and append that content if you like. (If you do not call parentBlock(), the setBlock() call will completely override the parent block content.)Finally, rendering the combined view and layout ...$template = Template::new(...); $template-&gt;setLayout('layout'); $template-&gt;setView('view'); $output = $template(); ... will generate something like the following output:&lt;html&gt; &lt;head&gt; &lt;title&gt;Blocks Example&lt;\/title&gt; &lt;\/head&gt; &lt;body&gt; &lt;div id=\"local-nav\"&gt; &lt;p&gt;&lt;a href=\"\/bar\"&gt;Bar&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, above parent --&gt; &lt;p&gt;&lt;a href=\"\/foo\"&gt;Foo&lt;\/a&gt;&lt;\/p&gt;&lt;!-- layout --&gt; &lt;p&gt;&lt;a href=\"\/baz\"&gt;Baz&lt;\/a&gt;&lt;\/p&gt;&lt;!-- view, below parent --&gt; &lt;\/div&gt; &lt;\/body&gt; &lt;\/html&gt; "},{"id":"\/1.x\/inheritance.html#1-9","title":"1.9. Inheritance","content":"Whereas you can wrap an inner \"view\" template with an outer \"layout\" template, you can also \"extend\" one template with another template. The differences are subtle but important.Here is an example of template inheritance. First, a \"parent\" template, composed of a series of blocks:&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; {{ setBlock ('head_title') }}{{= getBlock () ~}} {{ setBlock ('head_meta') }}{{= getBlock () ~}} {{ setBlock ('head_links') }}{{= getBlock () ~}} {{ setBlock ('head_styles') }} &lt;link rel=\"stylesheet\" href=\"\/theme\/basic.css\" type=\"text\/css\" media=\"screen\" \/&gt; {{= getBlock () ~}} {{ setBlock ('head_scripts') }}{{= getBlock () ~}} &lt;\/head&gt; &lt;body&gt; {{ setBlock ('body_header') }}{{= getBlock () ~}} {{ setBlock ('body_content') }}{{= getBlock () ~}} {{ setBlock ('body_footer') }}{{= getBlock () ~}} &lt;\/body&gt; &lt;\/html&gt; The above code defines a series of blocks via setBlock(), then displays the final block contents via getBlock(). (Note the use of the closing tag ~}} to consume the newline after the tag, which condenses blank lines in the output.)Next, a \"child\" template that extends the \"parent\" template. Note how it extends() the \"parent\" template, and overrides or modifies content from the parent blocks:{{ extends ('parent') }} {{ setBlock ('head_title') }} &lt;title&gt; My Extended Page &lt;\/title&gt; {{ endBlock () }} {{ setBlock ('head_meta') }} &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; {{ endBlock () }} {{ setBlock ('head_styles') }} {{ parentBlock () }} &lt;link rel=\"stylesheet\" href=\"\/theme\/custom.css\" type=\"text\/css\" media=\"screen\" \/&gt; {{ endBlock () }} {{ setBlock ('body_content') }} &lt;p&gt;The main content for my extended page.&lt;\/p&gt; {{ endBlock () }} Finally, when you render the \"child\" template ...$output = $tpl('child'); ... the output will look something like this:&lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;title&gt; My Extended Page &lt;\/title&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;link rel=\"stylesheet\" href=\"\/theme\/basic.css\" type=\"text\/css\" media=\"screen\" \/&gt; &lt;link rel=\"stylesheet\" href=\"\/theme\/custom.css\" type=\"text\/css\" media=\"screen\" \/&gt; &lt;\/head&gt; &lt;body&gt; &lt;p&gt;The main content for my extended page.&lt;\/p&gt; &lt;\/body&gt; &lt;\/html&gt; A similar approach is possible with views and layouts. However, only one layer of extension is possible that way (i.e., from the view to the layout). With extends(), any number of layers is possible.Both views and layouts may use extends(). That is, an inner view may extend one series of templates, and an outer layout may extend a different series of templates.Blocks are shared between both views and layouts. Layout blocks can be referred to by views, and vice versa.Finally, getContent() may not work as expected when extending templates. Any content not in a block will be overwritten with each successive call to extends(), so that only content from the last rendered template will be captured. As such, it is probably best to capture the \"main\" content of a view inside a block of its own, as in the above example, rather than using getContent()."},{"id":"\/1.x\/helpers\/overview.html#1-10-1","title":"1.10.1. Overview","content":"Helpers are invokable objects that generate HTML for you. You can address them as methods on $this in PHP template code, or by just the helper name when using Qiq syntax.PHP syntax:&lt;?= $this-&gt;anchor('http:\/\/qiqphp.com', 'Qiq for PHP') ?&gt; Qiq syntax:{{= anchor ('http:\/\/qiqphp.com', 'Qiq for PHP') }} Both generate this HTML:&lt;a href=\"http:\/\/qiqphp.com\"&gt;Qiq for PHP&lt;\/a&gt; Qiq comes with a comprehensive set of helpers for general use, and for building forms. You can also create your own custom helpers.Further, you can call any public or protected Template method from the template code. (This is because the template code is executed \"inside\" the Template object.) Among other things, you can set the layout, or render other templates, from inside any template:{{ setLayout ('seasonal-layout') }} {{= render ('some\/other\/template') }} "},{"id":"\/1.x\/helpers\/general.html#1-10-2","title":"1.10.2. General Helpers","content":"All helpers automatically apply appropriate escaping. This means you can use {{= ... }} to output them. If you use {{h ... }} et al., you will end up double-escaping the output.You can also address the helpers as methods on $this in PHP template code."},{"id":"\/1.x\/helpers\/general.html#1-10-2-1","title":"1.10.2.1. anchor","content":"Helper for &lt;a&gt; tags.{{= anchor ( 'http:\/\/qiqphp.com', \/\/ (string) href 'Qiq Project', \/\/ (string) text [ \/\/ (array) optional attributes 'id' =&gt; 'qiq-link' ] ) }} &lt;a href=\"http:\/\/qiqphp.com\" id=\"qiq-link\"&gt;Qiq for PHP&lt;\/a&gt; To output the anchor text without escaping, use the pseudo-attribute _raw:{{= anchor ( 'http:\/\/qiqphp.com', \/\/ (string) href '&lt;em&gt;qiq Project&lt;\/em&gt;', \/\/ (string) text [ \/\/ (array) optional attributes 'id' =&gt; 'qiq-link' '_raw' =&gt; true ] ) }} &lt;a href=\"http:\/\/qiqphp.com\" id=\"qiq-link\"&gt;&lt;em&gt;Qiq for PHP&lt;\/em&gt;&lt;\/a&gt; (The href and attributes will still be escaped properly.)"},{"id":"\/1.x\/helpers\/general.html#1-10-2-2","title":"1.10.2.2. base","content":"Helper for &lt;base&gt; tags.{{= base ( '\/base' \/\/ (string) href ) }} &lt;base href=\"\/base\" \/&gt; "},{"id":"\/1.x\/helpers\/general.html#1-10-2-3","title":"1.10.2.3. dl","content":"Helper for &lt;dl&gt; tags with &lt;dt&gt;\/&lt;dd&gt; items.{{= dl ( [ \/\/ (array) dt keys and dd values 'foo' =&gt; 'Foo Def', 'bar' =&gt; [ 'Bar Def A', 'Bar Def B', 'Bar Def C', ], 'baz' =&gt; 'Baz Def', ], [ \/\/ (array) optional attributes 'id' =&gt; 'test' ], ) }} &lt;dl id=\"test\"&gt; &lt;dt&gt;foo&lt;\/dt&gt; &lt;dd&gt;Foo Def&lt;\/dd&gt; &lt;dt&gt;bar&lt;\/dt&gt; &lt;dd&gt;Bar Def A&lt;\/dd&gt; &lt;dd&gt;Bar Def B&lt;\/dd&gt; &lt;dd&gt;Bar Def C&lt;\/dd&gt; &lt;dt&gt;baz&lt;\/dt&gt; &lt;dd&gt;Baz Def&lt;\/dd&gt; &lt;\/dl&gt; "},{"id":"\/1.x\/helpers\/general.html#1-10-2-4","title":"1.10.2.4. image","content":"Helper for &lt;img&gt; tags.{{= image ( '\/images\/hello.jpg', \/\/ (string) image href src [ \/\/ (array) optional attributes 'id' =&gt; 'image-id' ] ) }} &lt;!-- if alt is not specified, uses the basename of the image href --&gt; &lt;img src=\"\/images\/hello.jpg\" alt=\"hello\" id=\"image-id\" \/&gt; "},{"id":"\/1.x\/helpers\/general.html#1-10-2-5","title":"1.10.2.5. items","content":"Helper for a series of &lt;li&gt; tags.{{= items ([ \/\/ (array) list items 'foo', 'bar', 'baz' ]) }} &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; "},{"id":"\/1.x\/helpers\/general.html#1-10-2-6","title":"1.10.2.6. link","content":"Helper for a &lt;link&gt; tag.{{= link ([ \/\/ (array) attributes 'rel' =&gt; 'prev', 'href' =&gt; '\/path\/to\/prev', ]) }} &lt;link rel=\"prev\" href=\"\/path\/to\/prev\" \/&gt; "},{"id":"\/1.x\/helpers\/general.html#1-10-2-7","title":"1.10.2.7. linkStylesheet","content":"Helper for a &lt;link&gt; stylesheet tag.{{= linkStylesheet ( '\/css\/print.css', \/\/ (string) the stylesheet href [ \/\/ (array) optional attributes 'media' =&gt; 'print', ] ) }} &lt;link rel=\"stylesheet\" href=\"\/css\/print.css\" type=\"text\/css\" media=\"print\" \/&gt; "},{"id":"\/1.x\/helpers\/general.html#1-10-2-8","title":"1.10.2.8. meta","content":"Helper for a &lt;meta&gt; tag.{{= meta ([ \/\/ (array) attributes 'charset' =&gt; 'utf-8' ]) }} &lt;meta charset=\"utf-8\"&gt; "},{"id":"\/1.x\/helpers\/general.html#1-10-2-9","title":"1.10.2.9. metaHttp","content":"Helper for a &lt;meta http-equiv&gt; tag.{{= metaHttp ( 'Location', \/\/ (string) http-equiv attribute '\/redirect\/to\/here' \/\/ (string) content attribute ) }} &lt;meta http-equiv=\"Location\" content=\"\/redirect\/to\/here\"&gt; "},{"id":"\/1.x\/helpers\/general.html#1-10-2-10","title":"1.10.2.10. metaName","content":"Helper for a &lt;meta name&gt; tag.{{= metaHttp ( 'author', \/\/ (string) name attribute 'Qiq for PHP' \/\/ (string) content attribute ) }} &lt;meta name=\"author\" content=\"Qiq for PHP\"&gt; "},{"id":"\/1.x\/helpers\/general.html#1-10-2-11","title":"1.10.2.11. ol","content":"Helper for &lt;ol&gt; tags with &lt;li&gt; items.{{= ol ( [ \/\/ (array) list items 'foo', 'bar', 'baz' ], [ \/\/ (array) optional attributes 'id' =&gt; 'foo-list' ] ) }} &lt;ol id=\"foo-list\"&gt; &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; &lt;\/ol&gt; "},{"id":"\/1.x\/helpers\/general.html#1-10-2-12","title":"1.10.2.12. script","content":"Helper for a &lt;script&gt; tag.{{= script ( '\/js\/functions.js', \/\/ (string) src attribute [ \/\/ (array) other attributes 'async' =&gt; true ] ) }} &lt;script src=\"\/js\/functions.js\" type=\"text\/javascript\" async&gt;&lt;\/script&gt; "},{"id":"\/1.x\/helpers\/general.html#1-10-2-13","title":"1.10.2.13. ul","content":"Helper for &lt;ul&gt; tags with &lt;li&gt; items.{{= ul ( [ \/\/ (array) list items 'foo', 'bar', 'baz' ], [ \/\/ (array) optional attributes 'id' =&gt; 'foo-list' ] ) }} &lt;ul id=\"foo-list\"&gt; &lt;li&gt;foo&lt;\/li&gt; &lt;li&gt;bar&lt;\/li&gt; &lt;li&gt;baz&lt;\/li&gt; &lt;\/ul&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3","title":"1.10.3. Form Helpers","content":"All helpers automatically apply appropriate escaping. This means you can use {{= ... }} to output them. If you use {{h ... }} et al., you will end up double-escaping the output.You can also address the helpers as methods on $this in PHP template code."},{"id":"\/1.x\/helpers\/forms.html#1-10-3-1","title":"1.10.3.1. Form Tag","content":"Open a form like so:{{= form ([ \/\/ (array) attributes 'method' =&gt; 'post', 'action' =&gt; '\/hello', ]) }} &lt;form method=\"post\" action=\"\/hello\" enctype=\"multipart\/form-data\"&gt; You can close a form just using &lt;\/form&gt;."},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-1","title":"1.10.3.2.1. checkboxField","content":"You can use a checkboxField as a generic input field helper, but you will have to set the checked attribute yourself to mark it as checked or not.Alternatively, if you specify the pseudo-attribute _options, greater functionality becomes available: The _options specify one or more checkboxes as part of the field, with their value when checked, and their corresponding label. If the _options have more than one element, then field name will be appended automatically with [] to make it an array. The value attribute will be matched against the _options and the correct checkboxes will be checked for you. The _default pseudo-attribute, when present, will produce a hidden input field for the value when no checkboxes are checked. {{= checkboxField ([ \/\/ (array) attributes 'name' =&gt; 'flags', 'value' =&gt; 'bar', '_default' =&gt; '', '_options' =&gt; [ 'foo' =&gt; 'Foo Flag', 'bar' =&gt; 'Bar Flag', 'baz' =&gt; 'Baz Flag', ] ]) }} &lt;input type=\"hidden\" name=\"flags\" value=\"\" \/&gt; &lt;label&gt;&lt;input type=\"checkbox\" name=\"flags[]\" value=\"foo\" \/&gt; Foo Flag&lt;\/label&gt; &lt;label&gt;&lt;input type=\"checkbox\" name=\"flags[]\" value=\"bar\" checked \/&gt; Bar Flag&lt;\/label&gt; &lt;label&gt;&lt;input type=\"checkbox\" name=\"flags[]\" value=\"baz\" \/&gt; Baz Flag&lt;\/label&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-2","title":"1.10.3.2.2. colorField","content":"{{= colorField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"color\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-3","title":"1.10.3.2.3. dateField","content":"{{= dateField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"date\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-4","title":"1.10.3.2.4. datetimeField","content":"{{= datetimeField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"datetime\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-5","title":"1.10.3.2.5. datetimeLocalField","content":"{{= datetimeLocalField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"datetime-local\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-6","title":"1.10.3.2.6. emailField","content":"{{= emailField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"email\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-7","title":"1.10.3.2.7. fileField","content":"{{= fileField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"file\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-8","title":"1.10.3.2.8. hiddenField","content":"{{= hiddenField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"hidden\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-9","title":"1.10.3.2.9. inputField","content":"A generic input field; specify the type needed.{{= inputField ([ \/\/ (array) attributes 'type' =&gt; 'text', 'name' =&gt; 'foo', 'value' =&gt; 'bar', \/\/ ... ]) }} &lt;input type=\"text\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-10","title":"1.10.3.2.10. monthField","content":"{{= monthField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"month\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-11","title":"1.10.3.2.11. numberField","content":"{{= numberField ([ \/\/ (array) attributes 'type' =&gt; 'number', 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"number\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-12","title":"1.10.3.2.12. passwordField","content":"{{= passwordField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"password\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-13","title":"1.10.3.2.13. radioField","content":"You can use a radioField as a generic input field helper, but you will have to set the checked attribute yourself to mark it as checked or not.Alternatively, if you specify the pseudo-attribute _options, greater functionality becomes available: The _options specify one or more radio buttons as part of the field, with their value when checked, and their corresponding label. The value attribute will be matched against the _options and the correct checkboxes will be checked for you. {{= radioField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'baz', '_options' =&gt; [ 'bar' =&gt; 'Bar Label', 'baz' =&gt; 'Baz Label, 'dib' =&gt; 'Dib Label', ), ]) }} &lt;label&gt;&lt;input type=\"radio\" name=\"foo\" value=\"bar\" \/&gt; Bar Label&lt;\/label&gt; &lt;label&gt;&lt;input type=\"radio\" name=\"foo\" value=\"baz\" checked \/&gt; Baz Label&lt;\/label&gt; &lt;label&gt;&lt;input type=\"radio\" name=\"foo\" value=\"dib\" \/&gt; Dib Label&lt;\/label&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-14","title":"1.10.3.2.14. rangeField","content":"{{= rangeField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"range\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-15","title":"1.10.3.2.15. searchField","content":"{{= searchField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"search\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-16","title":"1.10.3.2.16. select","content":"Use the pseudo-attribute _options to describe the &lt;option&gt; tags.The attribute placeholder is honored as a placeholder label when no option is selected. The pseudo-attribute _default specifies the value of the placeholder.Using the attribute 'multiple' =&gt; true will set up a multiple select, and automatically add [] to the name if it is not already there.{{= select ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'dib', 'placeholder' =&gt; 'Please pick one', '_default' =&gt; '', '_options' =&gt; [ 'bar' =&gt; 'Bar Label', 'baz' =&gt; 'Baz Label', 'dib' =&gt; 'Dib Label', 'zim' =&gt; 'Zim Label', ], ]) }} &lt;select name=\"foo\"&gt; &lt;option value=\"\" disabled&gt;Please pick one&lt;\/option&gt; &lt;option value=\"bar\"&gt;Bar Label&lt;\/option&gt; &lt;option value=\"baz\"&gt;Baz Label&lt;\/option&gt; &lt;option value=\"dib\" selected&gt;Dib Label&lt;\/option&gt; &lt;option value=\"zim\"&gt;Zim Label&lt;\/option&gt; &lt;\/select&gt; The helper also supports option groups. If an _options array value is itself an array, the key for that element will be used as an &lt;optgroup&gt; label and the array of values will be options under that group.{{= select ([ 'name' =&gt; 'foo', 'value' =&gt; 'bar', '_options' =&gt; [ 'Group A' =&gt; [ 'bar' =&gt; 'Bar Label', 'baz' =&gt; 'Baz Label', ], 'Group B' =&gt; [ 'dib' =&gt; 'Dib Label', 'zim' =&gt; 'Zim Label', ], ], ]) }} &lt;select name=\"foo\"&gt; &lt;optgroup label=\"Group A\"&gt; &lt;option value=\"bar\"&gt;Bar Label&lt;\/option&gt; &lt;option value=\"baz\"&gt;Baz Label&lt;\/option&gt; &lt;\/optgroup&gt; &lt;optgroup label=\"Group B\"&gt; &lt;option value=\"dib\" selected&gt;Dib Label&lt;\/option&gt; &lt;option value=\"zim\"&gt;Zim Label&lt;\/option&gt; &lt;\/optgroup&gt; &lt;\/select&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-17","title":"1.10.3.2.17. telField","content":"{{= telField([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"tel\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-18","title":"1.10.3.2.18. textField","content":"{{= textField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"text\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-19","title":"1.10.3.2.19. textarea","content":"{{= textarea ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;textarea name=\"foo\"&gt;bar&lt;\/textarea&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-20","title":"1.10.3.2.20. timeField","content":"{{= timeField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"time\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-21","title":"1.10.3.2.21. urlField","content":"{{= urlField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"url\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-2-22","title":"1.10.3.2.22. weekField","content":"{{= weekField ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"week\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-3","title":"1.10.3.3. Button Tags","content":"Helpers for various button tags."},{"id":"\/1.x\/helpers\/forms.html#1-10-3-3-1","title":"1.10.3.3.1. button","content":"{{= button ([ \/\/ (array) atttributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"button\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-3-2","title":"1.10.3.3.2. imageButton","content":"{{= imageButton ([ \/\/ (array) atttributes 'name' =&gt; 'foo', 'src' =&gt; '\/images\/map.png', ]) }} &lt;input type=\"image\" name=\"foo\" src=\"\/images\/map.png\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-3-3","title":"1.10.3.3.3. submitButton","content":"{{= submitButton ([ \/\/ (array) atttributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"submit\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-3-4","title":"1.10.3.3.4. resetButton","content":"{{= resetButton ([ \/\/ (array) attributes 'name' =&gt; 'foo', 'value' =&gt; 'bar', ]) }} &lt;input type=\"reset\" name=\"foo\" value=\"bar\" \/&gt; "},{"id":"\/1.x\/helpers\/forms.html#1-10-3-4","title":"1.10.3.4. Label Tag","content":"A helper for &lt;label&gt; tags.{{= label ( 'Label For Field', \/\/ (string) label text [ \/\/ (array) optional attributes 'for' =&gt; 'field' ] ) }} &lt;label for=\"field\"&gt;Label For Field&lt;\/label&gt; "},{"id":"\/1.x\/helpers\/custom.html#1-10-4","title":"1.10.4. Custom Helpers","content":"Developing a custom helper is straightforward: write a class for it, register it with the HelperLocator, then use it in a template."},{"id":"\/1.x\/helpers\/custom.html#1-10-4-1","title":"1.10.4.1. The Helper Class","content":"To write a helper, extend the Helper class, and implement the __invoke () method with whatever parameters you like. Have it return a string that has been appropriately escaped.Here is a helper to ROT-13 a string:namespace My\\Helper; use Qiq\\Helper; class Rot13 extends Helper { public function __invoke(string $str) : string { return $this-&gt;escape-&gt;h(str_rot13($str)); } } "},{"id":"\/1.x\/helpers\/custom.html#1-10-4-2","title":"1.10.4.2. The Helper Locator","content":"Now that you have the helper class, you will need to register a callable factory for it in the HelperLocator. (Registering a callable factory allows the HelperLocator to lazy-load the helper only when it is called.) The registration key will be the Qiq helper name, or the PHP $this helper method, you use for that helper in a template.$tpl = Template::new(...); $helperLocator = $tpl-&gt;getHelperLocator(); $helperLocator-&gt;set( 'rotOneThree', function () use ($helperLocator) { return new \\My\\Helper\\Rot13($helperLocator-&gt;escape()); } ); Note that you need to construct Helper classes with the Escape instance already in the HelperLocator."},{"id":"\/1.x\/helpers\/custom.html#1-10-4-3","title":"1.10.4.3. Use The Helper","content":"Now you can use the helper in template, either as Qiq code ...&lt;p&gt;{{= rotOneThree ('Uryyb Jbeyq!') }}&lt;\/p&gt; ... or as PHP:&lt;p&gt;&lt;?= $this-&gt;rotOneThree('Uryyb Jbeyq!') ?&gt;&lt;\/p&gt; Either way, the output will be the same:&lt;p&gt;Hello World!&lt;\/p&gt; "},{"id":"\/1.x\/compiler.html#1-11","title":"1.11. Compiler","content":"Although Qiq templates use native PHP, the {{ ... }} syntax sugar does require a compiling process. That process is very simple, even naive, but it does exist: If a compiled template already exists in the cache directory, and is newer than the source template file, the QiqCompiler returns the already-existing compiled template. Otherwise ... The QiqCompiler reads the source template file, splits out the {{ ... }} tags using a regular expression, and retains them as QiqToken objects . The QiqCompiler then invokes each QiqToken to get back the PHP code replacement for the {{ ... }} tag, and reassembles all the parts in order. The compiled template is saved to the compiler cache directory. The same source template will not be compiled again -- at least, not until it gets re-saved, thereby updating its timestamp, making it newer than the compiled version. "},{"id":"\/1.x\/compiler.html#1-11-1","title":"1.11.1. Cache Path","content":"The QiqCompiler cache path by default is your sys_get_temp_dir() directory appended with \/qiq, but you can specify any path with Template::new():$tpl = Template::new( cachePath: '\/path\/to\/qiqcache\/' ); The QiqCompiler saves the compiled templates in the cache using the full path of the source template file. For example, the cache path is \/private\/tmp and the source template file is at \/www\/site\/resources\/templates\/foo.php. That means the compiled template file will be cached at:\/private\/tmp\/www\/site\/resources\/templates\/foo.php If you see compiling errors, having the full source template path as part of the cache path will help you find the original template."},{"id":"\/1.x\/compiler.html#1-11-2","title":"1.11.2. Cache Clearing","content":"To clear the cache, reach into the Template to get the TemplateLocator, and call its clear() method.$tpl-&gt;getTemplateLocator()-&gt;clear(); "}]